/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FlightRouteImport } from './routes/flight'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as TripIdIndexRouteImport } from './routes/$tripId/index'
import { Route as TripIdMapRouteImport } from './routes/$tripId/map'
import { Route as AdminTripIdIndexRouteImport } from './routes/admin/$tripId/index'
import { Route as AdminTripIdRouteIdRouteImport } from './routes/admin/$tripId/$routeId'

const FlightRoute = FlightRouteImport.update({
  id: '/flight',
  path: '/flight',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const TripIdIndexRoute = TripIdIndexRouteImport.update({
  id: '/$tripId/',
  path: '/$tripId/',
  getParentRoute: () => rootRouteImport,
} as any)
const TripIdMapRoute = TripIdMapRouteImport.update({
  id: '/$tripId/map',
  path: '/$tripId/map',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminTripIdIndexRoute = AdminTripIdIndexRouteImport.update({
  id: '/$tripId/',
  path: '/$tripId/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminTripIdRouteIdRoute = AdminTripIdRouteIdRouteImport.update({
  id: '/$tripId/$routeId',
  path: '/$tripId/$routeId',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth': typeof AuthRoute
  '/flight': typeof FlightRoute
  '/$tripId/map': typeof TripIdMapRoute
  '/$tripId': typeof TripIdIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/$tripId/$routeId': typeof AdminTripIdRouteIdRoute
  '/admin/$tripId': typeof AdminTripIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/flight': typeof FlightRoute
  '/$tripId/map': typeof TripIdMapRoute
  '/$tripId': typeof TripIdIndexRoute
  '/admin': typeof AdminIndexRoute
  '/admin/$tripId/$routeId': typeof AdminTripIdRouteIdRoute
  '/admin/$tripId': typeof AdminTripIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/auth': typeof AuthRoute
  '/flight': typeof FlightRoute
  '/$tripId/map': typeof TripIdMapRoute
  '/$tripId/': typeof TripIdIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/$tripId/$routeId': typeof AdminTripIdRouteIdRoute
  '/admin/$tripId/': typeof AdminTripIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth'
    | '/flight'
    | '/$tripId/map'
    | '/$tripId'
    | '/admin/'
    | '/admin/$tripId/$routeId'
    | '/admin/$tripId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/flight'
    | '/$tripId/map'
    | '/$tripId'
    | '/admin'
    | '/admin/$tripId/$routeId'
    | '/admin/$tripId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth'
    | '/flight'
    | '/$tripId/map'
    | '/$tripId/'
    | '/admin/'
    | '/admin/$tripId/$routeId'
    | '/admin/$tripId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AuthRoute: typeof AuthRoute
  FlightRoute: typeof FlightRoute
  TripIdMapRoute: typeof TripIdMapRoute
  TripIdIndexRoute: typeof TripIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/flight': {
      id: '/flight'
      path: '/flight'
      fullPath: '/flight'
      preLoaderRoute: typeof FlightRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/$tripId/': {
      id: '/$tripId/'
      path: '/$tripId'
      fullPath: '/$tripId'
      preLoaderRoute: typeof TripIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$tripId/map': {
      id: '/$tripId/map'
      path: '/$tripId/map'
      fullPath: '/$tripId/map'
      preLoaderRoute: typeof TripIdMapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/$tripId/': {
      id: '/admin/$tripId/'
      path: '/$tripId'
      fullPath: '/admin/$tripId'
      preLoaderRoute: typeof AdminTripIdIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/$tripId/$routeId': {
      id: '/admin/$tripId/$routeId'
      path: '/$tripId/$routeId'
      fullPath: '/admin/$tripId/$routeId'
      preLoaderRoute: typeof AdminTripIdRouteIdRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminTripIdRouteIdRoute: typeof AdminTripIdRouteIdRoute
  AdminTripIdIndexRoute: typeof AdminTripIdIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminTripIdRouteIdRoute: AdminTripIdRouteIdRoute,
  AdminTripIdIndexRoute: AdminTripIdIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AuthRoute: AuthRoute,
  FlightRoute: FlightRoute,
  TripIdMapRoute: TripIdMapRoute,
  TripIdIndexRoute: TripIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
